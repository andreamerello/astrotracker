#:kivy 1.0
#:import MyScatterPlaneLayout astro.uix
#:import Theme astro.uix.Theme

<Separator@Widget>:
    size_hint_y: None
    height: '10dp'

<RotationScreen>:
    on_size: root.autoscale()

    MyScatterPlaneLayout:
        id: scatter
        do_rotation: False
        do_translation: root.tool == 'pan'
        do_scale: root.tool == 'pan'
        auto_bring_to_front: False

        ColorClippingWidget:
            id: color_clipping
            size: root.ids.sky.size
            size_hint: None, None
            #border_color: (0, 0, 1, 1)
            Image:
                id: sky
                #source: 'test2.jpg'
                pos: 0, 0
                size: self.texture_size
                size_hint: None, None
                on_source: root.autoscale()

        Widget:
            size: root.ids.sky.size
            size_hint: None, None
            canvas.after:
                # small circle whose visual size is always the same, to show
                # the rotation center
                Color:
                    rgba: (1, 1, 0, 1)
                Line:
                    circle: root.NPx, root.NPy, (10/root.ids.scatter.scale)

                # big circle whose radius is controlled by the user, to
                # visually check that the star trails match
                Color:
                    rgba: (1, 0, 0, 1)
                Line:
                    circle: root.NPx, root.NPy, root.sample_radius
                    dash_offset: 5
                    dash_length: 3


    BoxLayout:
        orientation: 'horizontal'
        size_hint: None, None
        height: '50dp'
        width: root.width - dp(100)

        Label:
            text: 'Black: %d' % (root.ids.slider.value1)
            color: Theme.PRIMARY
            width: self.texture_size[0] + dp(10)
            size_hint_x: None
        RangeSlider:
            id: slider
            min: 0
            max: 255
            value1: 0
            value2: 255
            on_value1: color_clipping.black = self.value1
            on_value2: color_clipping.white = self.value2
        Label:
            text: 'White: %d' % (root.ids.slider.value2)
            color: Theme.PRIMARY
            width: self.texture_size[0] + dp(10)
            size_hint_x: None

    BoxLayout:
        # right toolbar
        right: root.right
        orientation: 'vertical'
        size_hint_x: None
        width: '100dp'

        TextInput:
            text: root.last_image
            multiline: False
            on_focus: root.last_image = self.text

        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            height: "30dp"
            Widget:
                size_hint_x: None
                width: '25dp'
            IconButton:
                icon: 'fa-minus'
                font_size: "25dp"
                on_release: root.last_image_inc(-1)
            IconButton:
                icon: "fa-plus"
                font_size: "25dp"
                on_release: root.last_image_inc(+1)

        FlatButton:
            text: 'Load'
            on_release: root.load_image()

        Separator:

        FlatButton:
            text: 'Autoscale'
            on_release: root.autoscale()

        FlatButton:
            text: 'Pan & Zoom'
            tool: 'pan'
            background_color: Theme.BGSUCCESS if root.tool == self.tool else Theme.WHITE
            on_release: root.tool = self.tool

        FlatButton:
            text: 'Set center'
            tool: 'set_center'
            background_color: Theme.BGSUCCESS if root.tool == self.tool else Theme.WHITE
            on_release: root.tool = self.tool

        FlatButton:
            text: 'Radius'
            tool: 'set_radius'
            background_color: Theme.BGSUCCESS if root.tool == self.tool else Theme.WHITE
            on_release: root.tool = self.tool

        Separator:

        FlatButton:
            text: 'Exit'
            on_release: app.root.go_back()